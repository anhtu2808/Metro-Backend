server:
  port: 8080
spring:
  application:
    name: user-service
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  cloud:
    stream:
      bindings:
        sendWelcomeEmail-out-0:
          destination: welcome-email
          content-type: application/json
        sendOtpToEmail-out-0:
            destination: otp-email
            content-type: application/json

      kafka:
        binder:
          brokers: localhost:9092
          auto-create-topics: true
          configuration:
            auto.create.topics.enable: true
            num.partitions: 1
            default.replication.factor: 1
        bindings:
          sendWelcomeEmail-out-0:
            producer:
              configuration:
                acks: all
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
                spring.json.add.type.headers: true
                spring.json.type.mapping: NotificationEvent:com.metro.event.dto.NotificationEvent
                request.timeout.ms: 10000
                delivery.timeout.ms: 30000
                retries: 3
          sendOtpToEmail-out-0:
            producer:
              configuration:
                acks: all
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
                spring.json.add.type.headers: true
                spring.json.type.mapping: NotificationEvent:com.metro.event.dto.NotificationEvent
                request.timeout.ms: 10000
                delivery.timeout.ms: 30000
                retries: 3

    kafka:
      properties:
        spring.json.type.mapping: NotificationEvent:com.metro.event.dto.NotificationEvent
        spring.json.add.type.headers: true
        spring.json.trusted.packages: com.metro.event.dto
#      bootstrap.servers: kafka:9092
    function:
      definition: sendWelcomeEmail; sendOtpToEmail
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  security:
    user:
      name: admin
      password: 123456
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - profile
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Google
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
jwt:
  signerKey: ${JWT_SIGNER_KEY}
  valid-duration: 3600 # in second
  refreshable-duration: 36000 # in seconds

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
